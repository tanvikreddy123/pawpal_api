### =======================================================
### FLOW 1: ADMIN - Login and check initial state
### =======================================================

### 1. ADMIN LOGIN
# We log in as the default admin to get a token.
# @name adminLogin
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
    "username": "admin@pawpal.com",
    "password": "admin"
}

### Store the admin token in a variable for all future admin requests
@adminToken = {{adminLogin.response.body.jwtToken}}


### 2. ADMIN - GET ALL PETS (Initially Empty)
# We check the pet list. It should be an empty array [] at the start.
GET http://localhost:8080/api/admin/pets
Authorization: Bearer {{adminToken}}


### =======================================================
### FLOW 2: USER - Sign up and log in
### =======================================================

### 3. USER SIGNUP
# We create a new user account.
POST http://localhost:8080/api/auth/signup
Content-Type: application/json

{
    "name": "Maria Rodriguez",
    "email": "maria@example.com",
    "password": "password123"
}


### 4. USER LOGIN
# We log in as the new user to get their token and ID.
# @name userLogin
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
    "username": "maria@example.com",
    "password": "password123"
}

### Store the user's token and ID in variables for all future user requests
@userToken = {{userLogin.response.body.jwtToken}}
@userId = {{userLogin.response.body.userId}}


### =======================================================
### FLOW 3: ADMIN - Add Pets to the Platform
### =======================================================

# NOTE: Adding pets requires uploading an image (multipart/form-data).
# This is difficult to do in the REST Client extension.
#
# ACTION: For this one step, we will use the H2 Database Console.
# This is a temporary workaround to add data without needing Postman.


### =======================================================
### FLOW 4: USER - Browse and Request a Pet
### =======================================================

### 5. USER - VIEW AVAILABLE PETS
# Now we check the pet list again. It should contain the pets we added.
GET http://localhost:8080/api/user/pets
Authorization: Bearer {{userToken}}


### 6. USER - REQUEST ADOPTION
# Maria requests to adopt the pet with ID = 1.
POST http://localhost:8080/api/user/request-adoption
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
    "userId": {{userId}},
    "petId": 1
}


### 7. USER - CHECK MY REQUESTS
# Maria checks the status of her adoption requests.
GET http://localhost:8080/api/user/my-requests/{{userId}}
Authorization: Bearer {{userToken}}


### =======================================================
### FLOW 5: ADMIN - Manage Adoption Requests
### =======================================================

### 8. ADMIN - VIEW ALL ADOPTION REQUESTS
# The admin logs in and checks all pending requests.
GET http://localhost:8080/api/admin/adoption-requests
Authorization: Bearer {{adminToken}}


### 9. ADMIN - APPROVE THE REQUEST
# The admin approves Maria's request for the pet with request ID = 1.
# (Note: Request ID and Pet ID might be the same for the first request)
GET http://localhost:8080/api/admin/adoption-request/1/Approve
Authorization: Bearer {{adminToken}}


### =======================================================
### FLOW 6: FINAL CHECKS
### =======================================================

### 10. USER - VIEW AVAILABLE PETS AGAIN
# The adopted pet (ID=1) should no longer appear in the list of available pets.
GET http://localhost:8080/api/user/pets
Authorization: Bearer {{userToken}}


### 11. ADMIN - GET ALL PETS AGAIN
# The admin can see the pet with ID=1, but its status should now be "ADOPTED".
GET http://localhost:8080/api/admin/pets
Authorization: Bearer {{adminToken}}