### =====================================================================
### SECTION 1: LOCAL DEVELOPMENT TESTS (Server running on localhost:8080)
### =====================================================================

### 1. LOCAL - ADMIN LOGIN
# We log in as the default admin to get a token for local testing.
# @name localAdminLogin
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
    "username": "admin@pawpal.com",
    "password": "admin"
}
@localAdminToken = {{localAdminLogin.response.body.jwtToken}}


### 2. LOCAL - USER SIGNUP
POST http://localhost:8080/api/auth/signup
Content-Type: application/json

{
    "name": "Local Test User",
    "email": "local-user@example.com",
    "password": "password123"
}


### 3. LOCAL - USER LOGIN
# We log in as the new local user to get their token and ID.
# @name localUserLogin
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
    "username": "local-user@example.com",
    "password": "password123"
}
@localUserToken = {{localUserLogin.response.body.jwtToken}}
@localUserId = {{localUserLogin.response.body.userId}}

# NOTE: For a full local test, you would use the H2 console to add pets,
# then run the adoption request flow using the local endpoints and tokens.
# The flows below are for the live server.


### =====================================================================
### SECTION 2: LIVE PRODUCTION SERVER VERIFICATION (https://pawpal-api.onrender.com)
### =====================================================================

### A. LIVE - ADMIN LOGIN (Health Check)
# Proves the live server is online and the admin account exists.
# @name liveAdminLogin
POST https://pawpal-api.onrender.com/api/auth/login
Content-Type: application/json

{
    "username": "admin@pawpal.com",
    "password": "admin"
}
@liveAdminToken = {{liveAdminLogin.response.body.jwtToken}}


### B. LIVE - CREATE A NEW USER
# Proves: The live server can WRITE to the persistent Neon database.
# @name liveUserSignup
POST https://pawpal-api.onrender.com/api/auth/signup
Content-Type: application/json

{
    "name": "Live Test User n",
    "email": "live-user-n@example.com",  
    "password": "password123n"
}


### C. LIVE - LOGIN AS THE NEW USER
# Proves: The new user was saved correctly and can be READ from the database.
# @name liveUserLogin
POST https://pawpal-api.onrender.com/api/auth/login
Content-Type: application/json

{
    "username": "live-user-n@example.com", 
    "password": "password123n"
}
@liveUserToken = {{liveUserLogin.response.body.jwtToken}}


### D. LIVE - ACCESS A PROTECTED USER ROUTE
# Proves: JWT security and role-based access are fully working on the live server.
GET https://pawpal-api.onrender.com/api/user/pets
Authorization: Bearer {{liveUserToken}}